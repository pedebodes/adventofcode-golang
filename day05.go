package main

import "fmt"

func doRun(program []int, input []int) (output []int) {
	memory := make([]int, len(program))
	copy(memory, program)

	ip := 0
	for {
		instruction := memory[ip]
		opcode := instruction % 100

		getParameter := func(offset int) int {
			parameter := memory[ip+offset]
			mode := instruction / pow(10, offset+1) % 10
			switch mode {
			case 0:
				return memory[parameter]
			case 1:
				return parameter
			default:
				panic(fmt.Sprintf("falha: invalido mode: ip=%d inst=%d offset=%d mode=%d", ip, instruction, 
				offset, mode))
			}
		}

		switch opcode {

		case 1: 
			a, b, c := getParameter(1), getParameter(2), memory[ip+3]
			memory[c] = a + b
			ip += 4

		case 2:
			a, b, c := getParameter(1), getParameter(2), memory[ip+3]
			memory[c] = a * b
			ip += 4

		case 3:
			a := memory[ip+1]
			memory[a] = input[0]
			input = input[1:]
			ip += 2

		case 4: 
			a := getParameter(1)
			output = append(output, a)
			ip += 2

		case 5: 
			a, b := getParameter(1), getParameter(2)
			if a != 0 {
				ip = b
			} else {
				ip += 3
			}

		case 6: 
			a, b := getParameter(1), getParameter(2)
			if a == 0 {
				ip = b
			} else {
				ip += 3
			}

		case 7: 
			a, b, c := getParameter(1), getParameter(2), memory[ip+3]
			if a < b {
				memory[c] = 1
			} else {
				memory[c] = 0
			}
			ip += 4

		case 8: 
			a, b, c := getParameter(1), getParameter(2), memory[ip+3]
			if a == b {
				memory[c] = 1
			} else {
				memory[c] = 0
			}
			ip += 4

		case 99:
			return output

		default:
			panic(fmt.Sprintf("falha: invalido opcode: ip=%d inst=%d opcode=%d", ip, instruction, opcode))
		}
	}
}

func main() {
	program := []int{3,225,1,225,6,6,1100,1,238,225,104,0,1101,32,43,225,101,68,192,224,1001,224,-160,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,118,77,224,1001,224,-87,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,1102,5,19,225,1102,74,50,224,101,-3700,224,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1102,89,18,225,1002,14,72,224,1001,224,-3096,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,34,53,225,1102,54,10,225,1,113,61,224,101,-39,224,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1101,31,61,224,101,-92,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,75,18,225,102,48,87,224,101,-4272,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,23,92,225,2,165,218,224,101,-3675,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,8,49,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,226,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,344,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,359,1001,223,1,223,7,226,226,224,1002,223,2,223,1005,224,374,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,449,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,509,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,1108,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1107,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,599,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,659,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226}
	{
		output := doRun(program, []int{1})
		for i := 0; i < len(output)-1; i++ {
			if output[i] != 0 {
				panic(fmt.Sprintf("Falha: %v", output))
			}
		}
		fmt.Println("Parte 1: ",output[len(output)-1])
	}

	{
		output := doRun(program, []int{5})
		for i := 0; i < len(output)-1; i++ {
			if output[i] != 0 {
				panic(fmt.Sprintf("Falha: %v", output))
			}
		}
		fmt.Println("Parte 2: ",output[len(output)-1])
	}
}

func pow(a, b int) int {
	p := 1
	for b > 0 {
		if b&1 != 0 {
			p *= a
		}
		b >>= 1
		a *= a
	}
	return p
}